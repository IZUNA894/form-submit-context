{"version":3,"sources":["components/songForm.js","components/songlist.js","App.js","serviceWorker.js","index.js"],"names":["SongForm","addSong","useState","title","setTitle","onSubmit","e","preventDefault","type","value","onChange","target","SongList","id","name","songs","setsSongs","Songs","map","song","age","setAge","useEffect","console","log","Math","random","onClick","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2MAwBeA,EAtBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,QAAW,EACFC,mBAAS,IADP,mBACnBC,EADmB,KACbC,EADa,KAY1B,OACI,6BACE,0BAAMC,SAZO,SAACC,GAChBA,EAAEC,iBACFN,EAAQE,GACRC,EAAS,MAUH,2BAAOI,KAAK,OAAOC,MAAON,EAAOO,SANxB,SAACJ,GAChBF,EAASE,EAAEK,OAAOF,UAMZ,2BAAOD,KAAK,SAASC,MAAM,cCe1BG,EA9BE,WAAM,IAAD,EACMV,mBAAS,CAC7B,CAACW,GAAG,EAAEC,KAAK,cACX,CAACD,GAAG,EAAEC,KAAK,QACX,CAACD,GAAG,EAAEC,KAAK,gBACX,CAACD,GAAG,EAAEC,KAAK,oBALG,mBACXC,EADW,KACLC,EADK,KAYdC,EAAQF,EAAMG,KAAI,SAAAC,GAClB,OAAO,4BAAKA,EAAKL,SAbH,EAeIZ,mBAAS,IAfb,mBAeXkB,EAfW,KAeNC,EAfM,KAmBlB,OAHAC,qBAAU,WACNC,QAAQC,IAAI,mBACd,CAACT,IAEC,6BACI,kBAAC,EAAD,CAAUd,QAbD,SAACa,GACdE,EAAU,GAAD,mBAAKD,GAAL,CAAW,CAACF,GAAGY,KAAKC,SAASZ,cAalC,4BAAQa,QAAU,kBAAIN,EAAOD,EAAI,KAAKA,GACtC,4BACKH,KChBFW,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,a","file":"static/js/main.d6eb3fa2.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\n\r\nconst SongForm = ({addSong})=>{\r\n    const [title,setTitle]= useState('');\r\n    var handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n        addSong(title);\r\n        setTitle('');\r\n\r\n\r\n    }\r\n    var handleChange = (e)=>{\r\n        setTitle(e.target.value);\r\n    }\r\n    return (\r\n        <div>\r\n          <form onSubmit ={handleSubmit}>\r\n              <input type='text' value={title} onChange={handleChange}/>\r\n              <input type='submit' value=\"submit\"/>\r\n          </form>  \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SongForm","import React ,{useState,useEffect}from 'react'\r\nimport SongForm from \"./songForm.js\";\r\n\r\n const  SongList=()=> {\r\n    const [songs,setsSongs]=useState([\r\n        {id:1,name:'wake me up'},\r\n        {id:2,name:'Fire'},\r\n        {id:3,name:'Gambling man'},\r\n        {id:4,name:'Tanjiro no uta'},\r\n\r\n    ]);\r\n    const addSongs = (name)=>{\r\n        setsSongs([...songs,{id:Math.random(),name},\r\n                    ])\r\n    }\r\n    var Songs = songs.map(song=>{\r\n        return <li>{song.name}</li>\r\n    })\r\n    const [age, setAge] = useState(20);\r\n    useEffect(()=>{\r\n        console.log(\"effect ran...\");\r\n    },[songs]);\r\n    return (\r\n        <div>\r\n            <SongForm addSong = {addSongs}/>\r\n            <button onClick={ ()=>setAge(age+1)}>{age}</button>\r\n            <ul>\r\n                {Songs}\r\n            </ul>\r\n            \r\n        </div>\r\n    )\r\n}\r\nexport default SongList","import React from 'react';\nimport SongList from \"./components/songlist\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SongList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}